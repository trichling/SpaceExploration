@page "/game/{worldid}"
@rendermode InteractiveServer

@using SpaceExploration.Game.Planets
@using System.Timers

@inject IJSRuntime JSRuntime
@inject GameStateService GameStateService

<canvas id="gameCanvas" width="800" height="600"></canvas>

<br />

Highlight drone: <input id="highligtedDroneId" type="text"  />

@code {

    [Parameter]
    public string WorldId { get; set; }
    public Guid WorldIdGuid { get; set; }   
    override protected async Task OnInitializedAsync()
    {
        WorldIdGuid = Guid.Parse(WorldId);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //GameStateService.StateChanged += (sender, e) => InvokeAsync(() => StateHasChanged());
            timer = new Timer();
            timer.Interval = 30;
            timer.Elapsed += UpdateUi;
            timer.AutoReset = true;
            // Start the timer
            timer.Enabled = true;
        }

        await DrawGameState();
        base.OnAfterRender(firstRender);
    }
 
    private Timer timer;

    private void UpdateUi(object sender, ElapsedEventArgs e)
    {
        InvokeAsync(() => StateHasChanged());
    }

    private async Task DrawGameState()
    {
        var state = GameStateService.GetGameState(WorldIdGuid);
        Console.WriteLine(state.Shots.Count);   
        await Draw(state);
        GameStateService.RemoveShots(WorldIdGuid);
    }


    private async Task Draw(GameState state) => await JSRuntime.InvokeVoidAsync("draw", state);
    /*
    private async Task ClearCanvas() => await JSRuntime.InvokeVoidAsync("clearCanvas");
    private async Task DrawDrone(Drone drone) => await JSRuntime.InvokeVoidAsync("drawDrone", drone.Position.X * 800, drone.Position.Y * 600, drone.Heading.Degrees);
    private async Task DrawShot(DroneShot shot)
    {
         await JSRuntime.InvokeVoidAsync("drawShot", shot.Shooter.Position.X * 800, shot.Shooter.Position.Y * 600, shot.Target.Position.Y * 800, shot.Target.Position.Y * 600);  
         shot.Drawn = true;
    }
    */
}