@page "/game/{worldid}"
@rendermode InteractiveServer

@using SpaceExploration.Game.Contracts.Planets.Commands
@using SpaceExploration.Game.Planets
@using System.Timers

@inject IJSRuntime JSRuntime
@inject GameStateService GameStateService
@inject IMessageSession MessageSession

<div style="display: flex;">
    <canvas id="gameCanvas" width="800" height="600"></canvas>
    <div style="margin-left: 20px; max-height: 600px; overflow-y: auto;">
        <h3>Drone Scores</h3>
        <ul>
            @foreach (var score in DroneScores)
            {
                <li>@score.DroneName: @score.Score</li>
            }
        </ul>
    </div>
</div>

<br />

Highlight drone: <input id="highligtedDroneId" type="text"  />

@code {

    [Parameter]
    public string WorldId { get; set; }
    public Guid WorldIdGuid { get; set; }
    public List<DroneScore> DroneScores { get; set; } = new List<DroneScore>();

    override protected async Task OnInitializedAsync()
    {
        WorldIdGuid = Guid.Parse(WorldId);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //GameStateService.StateChanged += (sender, e) => InvokeAsync(() => StateHasChanged());
            timer = new Timer();
            timer.Interval = 500;
            timer.Elapsed += UpdateUi;
            timer.AutoReset = true;
            // Start the timer
            timer.Enabled = true;

            await MessageSession.Send(new CatchUp(WorldIdGuid));
        }

        await DrawGameState();
        base.OnAfterRender(firstRender);
    }
 
    private Timer timer;

    private void UpdateUi(object sender, ElapsedEventArgs e)
    {
        InvokeAsync(() => StateHasChanged());
    }

    private async Task DrawGameState()
    {
        var state = GameStateService.GetGameState(WorldIdGuid);
        DroneScores = state.Scores;
        await Draw(state);
        GameStateService.RemoveShots(WorldIdGuid);
    }


    private async Task Draw(GameState state) => await JSRuntime.InvokeVoidAsync("draw", state);

}